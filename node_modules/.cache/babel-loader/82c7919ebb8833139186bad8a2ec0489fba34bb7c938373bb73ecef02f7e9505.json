{"ast":null,"code":"var _jsxFileName = \"/Users/izah/Desktop/schedulemate/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport './App.css';\n\n// Example list of time zones\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst timezones = [\"America/New_York\", \"America/Chicago\", \"America/Los_Angeles\", \"Europe/London\", \"Europe/Paris\", \"Asia/Dubai\", \"Asia/Tokyo\", \"Asia/Kolkata\", \"Australia/Sydney\", \"UTC\"];\nconst localizer = momentLocalizer(moment);\n\n// TimeAPI.io API URL \nconst TIME_API_URL = \"https://timeapi.io/api/Conversion/ConvertTimeZone\";\nfunction App() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [timezone, setTimezone] = useState('');\n  const [friendUsername, setFriendUsername] = useState('');\n  const [friends, setFriends] = useState([]);\n  const [newEvent, setNewEvent] = useState({\n    title: '',\n    startTime: '',\n    endTime: ''\n  });\n  const [events, setEvents] = useState([]);\n  const [friendEvents, setFriendEvents] = useState([]); // Friend's events for calendar\n  const [isModalOpen, setIsModalOpen] = useState(false); // To control modal visibility\n  const [callDuration, setCallDuration] = useState(''); // Call duration in minutes\n  const [optimalTimes, setOptimalTimes] = useState([]); // Optimal times for the call\n  const [selectedFriendId, setSelectedFriendId] = useState(null);\n  const [showOptimalTimeModal, setShowOptimalTimeModal] = useState(false); // To control the \"Find Optimal Time\" modal\n  const [friendTimezone, setFriendTimezone] = useState(''); // Friend's timezone\n\n  // Check localStorage for user info when the app loads\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      setCurrentUser(user);\n      fetchFriendsAndEvents(user.id);\n    }\n  }, []);\n\n  // Fetch user's friends and events\n  const fetchFriendsAndEvents = async userId => {\n    try {\n      const friendsResponse = await axios.get(`http://localhost:5000/friends/${userId}`);\n      setFriends(friendsResponse.data);\n      const eventsResponse = await axios.get(`http://localhost:5000/schedule/${userId}`);\n      setEvents(eventsResponse.data.map(event => ({\n        title: event.title,\n        start: new Date(event.start_time),\n        // Keep in UTC\n        end: new Date(event.end_time) // Keep in UTC\n      })));\n    } catch (error) {\n      console.error('Error fetching friends and events:', error);\n    }\n  };\n\n  // Register new user with timezone\n  const handleRegister = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/register', {\n        username,\n        password,\n        timezone\n      });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      setTimezone('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert(error.response.data.message);\n    }\n  };\n\n  // Login user\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/login', {\n        username,\n        password\n      });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert('Invalid credentials');\n    }\n  };\n\n  // Logout user\n  const handleLogout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n    setFriends([]);\n    setEvents([]);\n  };\n\n  // Add a new event \n  const handleAddEvent = () => {\n    const utcStartTime = new Date(newEvent.startTime).toISOString(); // Convert to UTC\n    const utcEndTime = new Date(newEvent.endTime).toISOString(); // Convert to UTC\n\n    axios.post('http://localhost:5000/add-event', {\n      userId: currentUser.id,\n      title: newEvent.title,\n      startTime: utcStartTime,\n      endTime: utcEndTime\n    }).then(response => {\n      setNewEvent({\n        title: '',\n        startTime: '',\n        endTime: ''\n      });\n      setEvents([...events, {\n        title: response.data.title,\n        start: new Date(response.data.start_time),\n        end: new Date(response.data.end_time)\n      }]);\n    }).catch(error => {\n      alert(error.response.data.message);\n    });\n  };\n\n  // Add a friend by username\n  const handleAddFriend = () => {\n    axios.post('http://localhost:5000/add-friend', {\n      userId: currentUser.id,\n      friendUsername\n    }).then(response => {\n      alert(`${friendUsername} added as a friend`);\n      setFriendUsername('');\n      fetchFriendsAndEvents(currentUser.id);\n    }).catch(error => {\n      alert(error.response.data.message);\n    });\n  };\n\n  // Fetch friend's events and open the modal (convert UTC to current user's timezone using API)\n  const handleShowFriendCalendar = async friendId => {\n    try {\n      // Fetch friend's schedule\n      const response = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n\n      // Fetch friend's time zone from the users table\n      const friendResponse = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friendResponse.data.timezone;\n      console.log('Friend timezone:', friendTimezone);\n\n      // Map through the events and convert the start and end times to the current user's time zone\n      const events = await Promise.all(response.data.map(async event => {\n        // Convert the event's start and end times from the friend's time zone to the current user's time zone\n        const startTime = await convertTimeToUserTimezone(event.start_time, friendTimezone, currentUser.timezone);\n        const endTime = await convertTimeToUserTimezone(event.end_time, friendTimezone, currentUser.timezone);\n        console.log('In show friends calendar', startTime, endTime);\n\n        // Return the event with the converted start and end times\n        return {\n          title: event.title,\n          start: startTime,\n          // Converted to user's time zone\n          end: endTime // Converted to user's time zone\n        };\n      }));\n\n      // Set the friend's events to display in the calendar\n      setFriendEvents(events);\n      setIsModalOpen(true); // Open the modal to show friend's calendar\n    } catch (error) {\n      console.error('Error fetching friend\\'s schedule:', error);\n    }\n  };\n\n  // Find optimal time for a call with a friend\n  const handleFindOptimalTime = async (friendId, duration) => {\n    try {\n      // Fetch friend's timezone and events\n      const friend = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friend.data.timezone;\n      setFriendTimezone(friendTimezone);\n      const friendData = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n      const friendEvents = friendData.data.map(event => ({\n        start: new Date(event.start_time),\n        end: new Date(event.end_time)\n      }));\n\n      // Fetch current user's events\n      const userEvents = events.map(event => ({\n        start: new Date(event.start),\n        end: new Date(event.end)\n      }));\n      const freeTimes = [];\n\n      // Fallback time window (if no events are found)\n      const fallbackStart = new Date(); // Today at 9 AM\n      fallbackStart.setHours(9, 0, 0, 0); // Set the time to 9 AM\n      const fallbackEnd = new Date(); // Today at 9 PM\n      fallbackEnd.setHours(21, 0, 0, 0); // Set the time to 9 PM\n\n      // If friend has no events, use the fallback time window\n      if (friendEvents.length === 0) {\n        friendEvents.push({\n          start: fallbackStart,\n          end: fallbackEnd\n        });\n      }\n\n      // If user has no events, use the fallback time window\n      if (userEvents.length === 0) {\n        userEvents.push({\n          start: fallbackStart,\n          end: fallbackEnd\n        });\n      }\n\n      // Function to find free time slots between events\n      const findFreeSlots = (events, start, end, duration) => {\n        let freeSlots = [];\n        let currentStart = new Date(start);\n\n        // Sort events by start time\n        events.sort((a, b) => a.start - b.start);\n\n        // Check gaps between events for free time\n        for (let event of events) {\n          if (currentStart < event.start && event.start - currentStart >= duration) {\n            freeSlots.push({\n              start: new Date(currentStart),\n              end: new Date(currentStart.getTime() + duration)\n            });\n            if (freeSlots.length >= 5) return freeSlots; // Stop once we have 5 slots\n          }\n          currentStart = new Date(Math.max(currentStart, event.end));\n        }\n\n        // Check remaining time after last event\n        if (currentStart < end && end - currentStart >= duration) {\n          freeSlots.push({\n            start: new Date(currentStart),\n            end: new Date(currentStart.getTime() + duration)\n          });\n        }\n        return freeSlots;\n      };\n\n      // Convert call duration from minutes to milliseconds\n      const callDurationInMs = duration * 60 * 1000;\n\n      // Find free time slots for both the user and the friend\n      const userFreeSlots = findFreeSlots(userEvents, fallbackStart, fallbackEnd, callDurationInMs);\n      const friendFreeSlots = findFreeSlots(friendEvents, fallbackStart, fallbackEnd, callDurationInMs);\n\n      // Find overlapping free slots between user and friend\n      let overlappingSlots = [];\n      for (let userSlot of userFreeSlots) {\n        for (let friendSlot of friendFreeSlots) {\n          const overlapStart = new Date(Math.max(userSlot.start, friendSlot.start));\n          const overlapEnd = new Date(Math.min(userSlot.end, friendSlot.end));\n          if (overlapEnd - overlapStart >= callDurationInMs) {\n            overlappingSlots.push({\n              start: overlapStart,\n              end: overlapEnd\n            });\n            if (overlappingSlots.length >= 5) break; // Stop once we have 5 slots\n          }\n        }\n        if (overlappingSlots.length >= 5) break; // Stop once we have 5 slots\n      }\n\n      // If no overlapping free times are found, use the fallback window\n      if (overlappingSlots.length === 0) {\n        freeTimes.push({\n          start: fallbackStart,\n          end: new Date(fallbackStart.getTime() + callDurationInMs)\n        });\n      } else {\n        freeTimes.push(...overlappingSlots.slice(0, 5)); // Only push up to 5 slots\n      }\n      console.log('Free times:', freeTimes);\n      return setOptimalTimes(freeTimes);\n    } catch (error) {\n      console.error('Error finding optimal time:', error);\n    }\n  };\n\n  // Close the modal\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setShowOptimalTimeModal(false); // Close both modals when closing\n  };\n  function formatDateToCustomFormat(isoDate) {\n    const date = new Date(isoDate);\n\n    // Extract date parts\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed, so +1\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n  }\n\n  // Time zone conversion API function using timeapi.io\n  const convertTimeToUserTimezone = async (time, fromTimezone, toTimezone) => {\n    const newTime = formatDateToCustomFormat(time);\n    console.log('Converting time:', newTime, 'from', fromTimezone, 'to', toTimezone);\n    try {\n      // Call timeapi.io to convert the time from one timezone to another\n      const response = await axios.post(TIME_API_URL, {\n        fromTimeZone: fromTimezone,\n        // Friend's time zone (or source time zone)\n        dateTime: newTime,\n        // Time in ISO format\n        toTimeZone: toTimezone,\n        // User's time zone (or target time zone)\n        dstAmbiguity: \"\" // Optional field for handling DST ambiguities\n      });\n      console.log('Converted time:', response.data.conversionResult.dateTime);\n\n      //date time is in format 2024-10-23T06:00:00\n\n      // Return the converted time.... to do\n      return new Date(response.data.conversionResult.dateTime);\n    } catch (error) {\n      console.error('Error converting time zone:', error);\n      return new Date(time); // Fallback to original time if the API fails\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !currentUser ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"User-auth-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"SchedYouLater!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: timezone,\n        onChange: e => setTimezone(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Timezone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this), timezones.map(tz => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: tz,\n          children: tz\n        }, tz, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRegister,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome, \", currentUser.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Friends\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: friends.map(friend => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              onClick: () => handleShowFriendCalendar(friend.id),\n              children: friend.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                setSelectedFriendId(friend.id);\n                setIsModalOpen(true);\n                setShowOptimalTimeModal(true);\n              },\n              children: \"Find Optimal Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 17\n            }, this)]\n          }, friend.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Add a Friend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Friend's Username\",\n          value: friendUsername,\n          onChange: e => setFriendUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddFriend,\n          children: \"Add Friend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-event\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Add Event to Your Calendar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Event Title\",\n          value: newEvent.title,\n          onChange: e => setNewEvent({\n            ...newEvent,\n            title: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          placeholder: \"Start Time\",\n          value: newEvent.startTime,\n          onChange: e => setNewEvent({\n            ...newEvent,\n            startTime: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          placeholder: \"End Time\",\n          value: newEvent.endTime,\n          onChange: e => setNewEvent({\n            ...newEvent,\n            endTime: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddEvent,\n          children: \"Add Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n        localizer: localizer,\n        events: events.map(event => ({\n          title: event.title,\n          start: new Date(event.start),\n          // Show in user's timezone (React Big Calendar accepts valid Date objects)\n          end: new Date(event.end) // Show in user's timezone\n        })),\n        startAccessor: \"start\",\n        endAccessor: \"end\",\n        style: {\n          height: 500,\n          margin: \"50px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen && !showOptimalTimeModal,\n        onClose: handleCloseModal,\n        children: [/*#__PURE__*/_jsxDEV(Calendar, {\n          localizer: localizer,\n          events: friendEvents.length > 0 ? friendEvents.map(event => ({\n            title: event.title,\n            start: new Date(event.start),\n            end: new Date(event.end)\n          })) : [],\n          startAccessor: \"start\",\n          endAccessor: \"end\",\n          style: {\n            height: 400,\n            margin: \"50px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this), friendEvents.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This friend has no scheduled events.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen && showOptimalTimeModal,\n        onClose: handleCloseModal,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Find Optimal Call Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Call duration (minutes)\",\n          value: callDuration,\n          onChange: e => setCallDuration(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleFindOptimalTime(selectedFriendId, callDuration),\n          children: \"Find Optimal Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 13\n        }, this), optimalTimes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: optimalTimes.map((slot, index) => {\n            // User's local time\n            const userStartTime = slot.start.toLocaleString(undefined, {\n              hour: 'numeric',\n              minute: 'numeric',\n              hour12: true // 12-hour format\n            });\n            const userEndTime = slot.end.toLocaleString(undefined, {\n              hour: 'numeric',\n              minute: 'numeric',\n              hour12: true // 12-hour format\n            });\n            console.log(\"friendTimezone\", friendTimezone);\n            console.log(\"users timezone\", currentUser.timezone);\n            // Friend's local time -> convert user start and end time to friend's timezone\n            const friendStartTime = slot.start.toLocaleString(undefined, {\n              hour: 'numeric',\n              minute: 'numeric',\n              hour12: true,\n              // 12-hour format\n              timeZone: friendTimezone\n            });\n            const friendEndTime = slot.end.toLocaleString(undefined, {\n              hour: 'numeric',\n              minute: 'numeric',\n              hour12: true,\n              // 12-hour format\n              timeZone: friendTimezone\n            });\n\n            // Formatting the date for display\n            const callDate = slot.start.toLocaleDateString(undefined, {\n              day: 'numeric',\n              month: 'long'\n            });\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"You can call your friend on \", callDate, \" from \", userStartTime, \" to \", userEndTime, \", which would be \", friendStartTime, \" to \", friendEndTime, \" for your friend.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 21\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dxj+/UofPGUAbaO/e+HnpPbx2cE=\");\n_c = App;\nexport default App;\n\n// Modal Component\nconst Modal = ({\n  isOpen,\n  onClose,\n  children\n}) => {\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: modalStyles.overlay,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: modalStyles.modal,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        style: modalStyles.closeButton,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 520,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Modal;\nconst modalStyles = {\n  overlay: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1000\n  },\n  modal: {\n    backgroundColor: '#fff',\n    padding: '20px',\n    borderRadius: '8px',\n    maxWidth: '600px',\n    width: '100%'\n  },\n  closeButton: {\n    float: 'right',\n    backgroundColor: '#f44336',\n    color: 'white',\n    border: 'none',\n    padding: '5px 10px',\n    cursor: 'pointer',\n    borderRadius: '5px'\n  }\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Modal\");","map":{"version":3,"names":["React","useState","useEffect","axios","Calendar","momentLocalizer","moment","jsxDEV","_jsxDEV","timezones","localizer","TIME_API_URL","App","_s","currentUser","setCurrentUser","username","setUsername","password","setPassword","timezone","setTimezone","friendUsername","setFriendUsername","friends","setFriends","newEvent","setNewEvent","title","startTime","endTime","events","setEvents","friendEvents","setFriendEvents","isModalOpen","setIsModalOpen","callDuration","setCallDuration","optimalTimes","setOptimalTimes","selectedFriendId","setSelectedFriendId","showOptimalTimeModal","setShowOptimalTimeModal","friendTimezone","setFriendTimezone","storedUser","localStorage","getItem","user","JSON","parse","fetchFriendsAndEvents","id","userId","friendsResponse","get","data","eventsResponse","map","event","start","Date","start_time","end","end_time","error","console","handleRegister","response","post","setItem","stringify","alert","message","handleLogin","handleLogout","removeItem","handleAddEvent","utcStartTime","toISOString","utcEndTime","then","catch","handleAddFriend","handleShowFriendCalendar","friendId","friendResponse","log","Promise","all","convertTimeToUserTimezone","handleFindOptimalTime","duration","friend","friendData","userEvents","freeTimes","fallbackStart","setHours","fallbackEnd","length","push","findFreeSlots","freeSlots","currentStart","sort","a","b","getTime","Math","max","callDurationInMs","userFreeSlots","friendFreeSlots","overlappingSlots","userSlot","friendSlot","overlapStart","overlapEnd","min","slice","handleCloseModal","formatDateToCustomFormat","isoDate","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","time","fromTimezone","toTimezone","newTime","fromTimeZone","dateTime","toTimeZone","dstAmbiguity","conversionResult","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","tz","onClick","href","startAccessor","endAccessor","style","height","margin","Modal","isOpen","onClose","slot","index","userStartTime","toLocaleString","undefined","hour","minute","hour12","userEndTime","friendStartTime","timeZone","friendEndTime","callDate","toLocaleDateString","_c","modalStyles","overlay","modal","closeButton","_c2","position","top","left","right","bottom","backgroundColor","display","justifyContent","alignItems","zIndex","padding","borderRadius","maxWidth","width","float","color","border","cursor","$RefreshReg$"],"sources":["/Users/izah/Desktop/schedulemate/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport './App.css';\n\n\n// Example list of time zones\nconst timezones = [\n  \"America/New_York\", \"America/Chicago\", \"America/Los_Angeles\", \"Europe/London\", \"Europe/Paris\",\n  \"Asia/Dubai\", \"Asia/Tokyo\", \"Asia/Kolkata\", \"Australia/Sydney\", \"UTC\"\n];\n\nconst localizer = momentLocalizer(moment);\n\n// TimeAPI.io API URL \nconst TIME_API_URL = \"https://timeapi.io/api/Conversion/ConvertTimeZone\";\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [timezone, setTimezone] = useState('');\n  const [friendUsername, setFriendUsername] = useState('');\n  const [friends, setFriends] = useState([]);\n  const [newEvent, setNewEvent] = useState({ title: '', startTime: '', endTime: '' });\n  const [events, setEvents] = useState([]);\n  const [friendEvents, setFriendEvents] = useState([]);  // Friend's events for calendar\n  const [isModalOpen, setIsModalOpen] = useState(false); // To control modal visibility\n  const [callDuration, setCallDuration] = useState(''); // Call duration in minutes\n  const [optimalTimes, setOptimalTimes] = useState([]); // Optimal times for the call\n  const [selectedFriendId, setSelectedFriendId] = useState(null);\n  const [showOptimalTimeModal, setShowOptimalTimeModal] = useState(false); // To control the \"Find Optimal Time\" modal\n  const [friendTimezone, setFriendTimezone] = useState(''); // Friend's timezone\n\n\n\n\n  // Check localStorage for user info when the app loads\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      setCurrentUser(user);\n      fetchFriendsAndEvents(user.id);\n    }\n  }, []);\n\n  // Fetch user's friends and events\n  const fetchFriendsAndEvents = async (userId) => {\n    try {\n      const friendsResponse = await axios.get(`http://localhost:5000/friends/${userId}`);\n      setFriends(friendsResponse.data);\n\n      const eventsResponse = await axios.get(`http://localhost:5000/schedule/${userId}`);\n      setEvents(\n        eventsResponse.data.map(event => ({\n          title: event.title,\n          start: new Date(event.start_time), // Keep in UTC\n          end: new Date(event.end_time),     // Keep in UTC\n        }))\n      );\n    } catch (error) {\n      console.error('Error fetching friends and events:', error);\n    }\n  };\n\n  // Register new user with timezone\n  const handleRegister = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/register', { username, password, timezone });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      setTimezone('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert(error.response.data.message);\n    }\n  };\n\n  // Login user\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/login', { username, password });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert('Invalid credentials');\n    }\n  };\n\n  // Logout user\n  const handleLogout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n    setFriends([]);\n    setEvents([]);\n  };\n\n  // Add a new event \n  const handleAddEvent = () => {\n    const utcStartTime = new Date(newEvent.startTime).toISOString();  // Convert to UTC\n    const utcEndTime = new Date(newEvent.endTime).toISOString();      // Convert to UTC\n\n    axios.post('http://localhost:5000/add-event', {\n      userId: currentUser.id,\n      title: newEvent.title,\n      startTime: utcStartTime,\n      endTime: utcEndTime\n    })\n    .then(response => {\n      setNewEvent({ title: '', startTime: '', endTime: '' });\n      setEvents([...events, {\n        title: response.data.title,\n        start: new Date(response.data.start_time),\n        end: new Date(response.data.end_time),\n      }]);\n    })\n    .catch(error => {\n      alert(error.response.data.message);\n    });\n  };\n\n  // Add a friend by username\n  const handleAddFriend = () => {\n    axios.post('http://localhost:5000/add-friend', { userId: currentUser.id, friendUsername })\n      .then(response => {\n        alert(`${friendUsername} added as a friend`);\n        setFriendUsername('');\n        fetchFriendsAndEvents(currentUser.id);\n      })\n      .catch(error => {\n        alert(error.response.data.message);\n      });\n  };\n\n  // Fetch friend's events and open the modal (convert UTC to current user's timezone using API)\n  const handleShowFriendCalendar = async (friendId) => {\n    try {\n      // Fetch friend's schedule\n      const response = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n      \n      // Fetch friend's time zone from the users table\n      const friendResponse = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friendResponse.data.timezone;\n      console.log('Friend timezone:', friendTimezone);\n      \n      // Map through the events and convert the start and end times to the current user's time zone\n      const events = await Promise.all(response.data.map(async (event) => {\n        // Convert the event's start and end times from the friend's time zone to the current user's time zone\n        const startTime = await convertTimeToUserTimezone(event.start_time, friendTimezone, currentUser.timezone);\n        const endTime = await convertTimeToUserTimezone(event.end_time, friendTimezone, currentUser.timezone);\n\n        console.log('In show friends calendar', startTime, endTime);\n\n        // Return the event with the converted start and end times\n        return {\n          title: event.title,\n          start: startTime, // Converted to user's time zone\n          end: endTime,     // Converted to user's time zone\n        };\n      }));\n\n      // Set the friend's events to display in the calendar\n      setFriendEvents(events);\n      setIsModalOpen(true);  // Open the modal to show friend's calendar\n    } catch (error) {\n      console.error('Error fetching friend\\'s schedule:', error);\n    }\n};\n\n  // Find optimal time for a call with a friend\n  const handleFindOptimalTime = async (friendId, duration) => {\n    try {\n      // Fetch friend's timezone and events\n      const friend = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friend.data.timezone;\n      setFriendTimezone(friendTimezone);\n  \n      const friendData = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n      const friendEvents = friendData.data.map(event => ({\n        start: new Date(event.start_time),\n        end: new Date(event.end_time),\n      }));\n  \n      // Fetch current user's events\n      const userEvents = events.map(event => ({\n        start: new Date(event.start),\n        end: new Date(event.end),\n      }));\n  \n      const freeTimes = [];\n  \n      // Fallback time window (if no events are found)\n      const fallbackStart = new Date(); // Today at 9 AM\n      fallbackStart.setHours(9, 0, 0, 0); // Set the time to 9 AM\n      const fallbackEnd = new Date(); // Today at 9 PM\n      fallbackEnd.setHours(21, 0, 0, 0); // Set the time to 9 PM\n  \n      // If friend has no events, use the fallback time window\n      if (friendEvents.length === 0) {\n        friendEvents.push({ start: fallbackStart, end: fallbackEnd });\n      }\n  \n      // If user has no events, use the fallback time window\n      if (userEvents.length === 0) {\n        userEvents.push({ start: fallbackStart, end: fallbackEnd });\n      }\n  \n      // Function to find free time slots between events\n      const findFreeSlots = (events, start, end, duration) => {\n        let freeSlots = [];\n        let currentStart = new Date(start);\n  \n        // Sort events by start time\n        events.sort((a, b) => a.start - b.start);\n  \n        // Check gaps between events for free time\n        for (let event of events) {\n          if (currentStart < event.start && (event.start - currentStart) >= duration) {\n            freeSlots.push({ start: new Date(currentStart), end: new Date(currentStart.getTime() + duration) });\n            if (freeSlots.length >= 5) return freeSlots; // Stop once we have 5 slots\n          }\n          currentStart = new Date(Math.max(currentStart, event.end));\n        }\n  \n        // Check remaining time after last event\n        if (currentStart < end && (end - currentStart) >= duration) {\n          freeSlots.push({ start: new Date(currentStart), end: new Date(currentStart.getTime() + duration) });\n        }\n  \n        return freeSlots;\n      };\n  \n      // Convert call duration from minutes to milliseconds\n      const callDurationInMs = duration * 60 * 1000;\n  \n      // Find free time slots for both the user and the friend\n      const userFreeSlots = findFreeSlots(userEvents, fallbackStart, fallbackEnd, callDurationInMs);\n      const friendFreeSlots = findFreeSlots(friendEvents, fallbackStart, fallbackEnd, callDurationInMs);\n  \n      // Find overlapping free slots between user and friend\n      let overlappingSlots = [];\n      for (let userSlot of userFreeSlots) {\n        for (let friendSlot of friendFreeSlots) {\n          const overlapStart = new Date(Math.max(userSlot.start, friendSlot.start));\n          const overlapEnd = new Date(Math.min(userSlot.end, friendSlot.end));\n  \n          if ((overlapEnd - overlapStart) >= callDurationInMs) {\n            overlappingSlots.push({ start: overlapStart, end: overlapEnd });\n            if (overlappingSlots.length >= 5) break; // Stop once we have 5 slots\n          }\n        }\n        if (overlappingSlots.length >= 5) break; // Stop once we have 5 slots\n      }\n  \n      // If no overlapping free times are found, use the fallback window\n      if (overlappingSlots.length === 0) {\n        freeTimes.push({ start: fallbackStart, end: new Date(fallbackStart.getTime() + callDurationInMs) });\n      } else {\n        freeTimes.push(...overlappingSlots.slice(0, 5)); // Only push up to 5 slots\n      }\n  \n      console.log('Free times:', freeTimes);\n      return setOptimalTimes(freeTimes);\n    } catch (error) {\n      console.error('Error finding optimal time:', error);\n    }\n  };\n  \n  \n  \n\n\n  // Close the modal\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setShowOptimalTimeModal(false);  // Close both modals when closing\n  };\n  \n\n  function formatDateToCustomFormat(isoDate) {\n    const date = new Date(isoDate);\n  \n    // Extract date parts\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed, so +1\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n  \n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n  }\n\n  // Time zone conversion API function using timeapi.io\n  const convertTimeToUserTimezone = async (time, fromTimezone, toTimezone) => {\n    const newTime = formatDateToCustomFormat(time);\n    console.log('Converting time:', newTime, 'from', fromTimezone, 'to', toTimezone);\n\n    try {\n      // Call timeapi.io to convert the time from one timezone to another\n      const response = await axios.post(TIME_API_URL, {\n        fromTimeZone: fromTimezone,  // Friend's time zone (or source time zone)\n        dateTime: newTime,  // Time in ISO format\n        toTimeZone: toTimezone, // User's time zone (or target time zone)\n        dstAmbiguity: \"\"  // Optional field for handling DST ambiguities\n      });\n      console.log('Converted time:', response.data.conversionResult.dateTime);\n\n      //date time is in format 2024-10-23T06:00:00\n\n      // Return the converted time.... to do\n      return new Date(response.data.conversionResult.dateTime);\n    } catch (error) {\n      console.error('Error converting time zone:', error);\n      return new Date(time);  // Fallback to original time if the API fails\n    }\n};\n\n\n  return (\n\n    <div>\n      \n      {!currentUser ? (\n        <div className='User-auth-page'>\n          <h1>SchedYouLater!</h1>\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            value={username}\n            onChange={e => setUsername(e.target.value)}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            value={password}\n            onChange={e => setPassword(e.target.value)}\n          />\n          \n          {/* Dropdown for Timezone */}\n          <select value={timezone} onChange={e => setTimezone(e.target.value)}>\n            <option value=\"\">Select Timezone</option>\n            {timezones.map(tz => (\n              <option key={tz} value={tz}>\n                {tz}\n              </option>\n            ))}\n          </select>\n\n          <button onClick={handleLogin}>Login</button>\n          <button onClick={handleRegister}>Register</button>\n        </div>\n      ) : (\n        <div className='home-page'>\n          <h1>Welcome, {currentUser.username}</h1>\n          <div className='user-info'>\n          <button onClick={handleLogout}>Logout</button>\n\n          <h2>Your Friends</h2>\n          <ul>\n            {friends.map(friend => (\n              <li key={friend.id}>\n                {/* Show Friend's Calendar */}\n                <a href=\"#\" onClick={() => handleShowFriendCalendar(friend.id)}>{friend.username}</a>\n\n                {/* Find Optimal Time */}\n                <button onClick={() => { setSelectedFriendId(friend.id); setIsModalOpen(true); setShowOptimalTimeModal(true); }}>\n                  Find Optimal Time\n                </button>\n              </li>\n            ))}\n          </ul>\n\n          {/* Friend adding form */}\n          <h2>Add a Friend</h2>\n          <input\n            type=\"text\"\n            placeholder=\"Friend's Username\"\n            value={friendUsername}\n            onChange={e => setFriendUsername(e.target.value)}\n          />\n          <button onClick={handleAddFriend}>Add Friend</button> {/* Now using handleAddFriend */}\n          </div>\n          <div className='add-event'>\n          <h3>Add Event to Your Calendar</h3>\n          <input\n            type=\"text\"\n            placeholder=\"Event Title\"\n            value={newEvent.title}\n            onChange={e => setNewEvent({ ...newEvent, title: e.target.value })}\n          />\n          <input\n            type=\"datetime-local\"\n            placeholder=\"Start Time\"\n            value={newEvent.startTime}\n            onChange={e => setNewEvent({ ...newEvent, startTime: e.target.value })}\n          />\n          <input\n            type=\"datetime-local\"\n            placeholder=\"End Time\"\n            value={newEvent.endTime}\n            onChange={e => setNewEvent({ ...newEvent, endTime: e.target.value })}\n          />\n          <button onClick={handleAddEvent}>Add Event</button>\n          </div>\n\n          <h2>Your Calendar</h2>\n          <Calendar\n            localizer={localizer}\n            events={events.map(event => ({\n              title: event.title,\n              start: new Date(event.start), // Show in user's timezone (React Big Calendar accepts valid Date objects)\n              end: new Date(event.end),     // Show in user's timezone\n            }))}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            style={{ height: 500, margin: \"50px\" }}\n          />\n\n          {/* Modal to show friend's calendar */}\n          {/* Modal to input call duration and show the optimal times */}\n          <Modal isOpen={isModalOpen && !showOptimalTimeModal} onClose={handleCloseModal}>\n            <Calendar\n              localizer={localizer}\n              events={friendEvents.length > 0 ? friendEvents.map(event => ({\n                title: event.title,\n                start: new Date(event.start),\n                end: new Date(event.end),\n              })) : []}\n              startAccessor=\"start\"\n              endAccessor=\"end\"\n              style={{ height: 400, margin: \"50px\" }}\n            />\n            {friendEvents.length === 0 && <p>This friend has no scheduled events.</p>}\n          </Modal>\n\n          {/* Modal to input call duration and show the optimal times */}\n          <Modal isOpen={isModalOpen && showOptimalTimeModal} onClose={handleCloseModal}>\n            <h2>Find Optimal Call Time</h2>\n            <input\n              type=\"number\"\n              placeholder=\"Call duration (minutes)\"\n              value={callDuration}\n              onChange={(e) => setCallDuration(e.target.value)}\n            />\n            <button onClick={() => handleFindOptimalTime(selectedFriendId, callDuration)}>Find Optimal Time</button>\n\n            {optimalTimes.length > 0 && (\n            <div>\n              {optimalTimes.map((slot, index) => {\n                // User's local time\n                const userStartTime = slot.start.toLocaleString(undefined, {\n                  hour: 'numeric',\n                  minute: 'numeric',\n                  hour12: true, // 12-hour format\n                });\n                const userEndTime = slot.end.toLocaleString(undefined, {\n                  hour: 'numeric',\n                  minute: 'numeric',\n                  hour12: true, // 12-hour format\n                });\n                \n                console.log(\"friendTimezone\", friendTimezone);  \n                console.log(\"users timezone\", currentUser.timezone);\n                // Friend's local time -> convert user start and end time to friend's timezone\n                const friendStartTime = slot.start.toLocaleString(undefined, {\n                  hour: 'numeric',\n                  minute: 'numeric',\n                  hour12: true, // 12-hour format\n                  timeZone: friendTimezone,\n                });\n                const friendEndTime = slot.end.toLocaleString(undefined, {\n                  hour: 'numeric',\n                  minute: 'numeric',\n                  hour12: true, // 12-hour format\n                  timeZone: friendTimezone,\n                });\n\n                // Formatting the date for display\n                const callDate = slot.start.toLocaleDateString(undefined, {\n                  day: 'numeric',\n                  month: 'long',\n                });\n\n                return (\n                  <div key={index}>\n                    <p>\n                      You can call your friend on {callDate} from {userStartTime} to {userEndTime}, \n                      which would be {friendStartTime} to {friendEndTime} for your friend.\n                    </p>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n\n          </Modal>\n\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// Modal Component\nconst Modal = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div style={modalStyles.overlay}>\n      <div style={modalStyles.modal}>\n        <button onClick={onClose} style={modalStyles.closeButton}>Close</button>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nconst modalStyles = {\n  overlay: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1000,\n  },\n  modal: {\n    backgroundColor: '#fff',\n    padding: '20px',\n    borderRadius: '8px',\n    maxWidth: '600px',\n    width: '100%',\n  },\n  closeButton: {\n    float: 'right',\n    backgroundColor: '#f44336',\n    color: 'white',\n    border: 'none',\n    padding: '5px 10px',\n    cursor: 'pointer',\n    borderRadius: '5px',\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}