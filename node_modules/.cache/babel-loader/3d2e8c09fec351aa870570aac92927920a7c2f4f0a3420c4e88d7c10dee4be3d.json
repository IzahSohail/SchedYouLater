{"ast":null,"code":"var _jsxFileName = \"/Users/izah/Desktop/schedulemate/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\n// Example list of time zones\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst timezones = [\"America/New_York\", \"America/Chicago\", \"America/Los_Angeles\", \"Europe/London\", \"Europe/Paris\", \"Asia/Dubai\", \"Asia/Tokyo\", \"Asia/Kolkata\", \"Australia/Sydney\", \"UTC\"];\nconst localizer = momentLocalizer(moment);\n\n// TimeAPI.io API URL (new API)\nconst TIME_API_URL = \"https://timeapi.io/api/Conversion/ConvertTimeZone\";\nfunction App() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [timezone, setTimezone] = useState('');\n  const [friendUsername, setFriendUsername] = useState('');\n  const [friends, setFriends] = useState([]);\n  const [newEvent, setNewEvent] = useState({\n    title: '',\n    startTime: '',\n    endTime: ''\n  });\n  const [events, setEvents] = useState([]);\n  const [friendEvents, setFriendEvents] = useState([]); // Friend's events for calendar\n  const [isModalOpen, setIsModalOpen] = useState(false); // For friend's calendar modal\n  const [isCallModalOpen, setIsCallModalOpen] = useState(false); // For call duration modal\n  const [callDuration, setCallDuration] = useState(''); // Call duration in minutes\n  const [optimalTimes, setOptimalTimes] = useState([]); // Optimal times for the call\n  const [selectedFriendId, setSelectedFriendId] = useState(null); // Track selected friend ID\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      setCurrentUser(user);\n      fetchFriendsAndEvents(user.id);\n    }\n  }, []);\n\n  // Fetch user's friends and events\n  const fetchFriendsAndEvents = async userId => {\n    try {\n      const friendsResponse = await axios.get(`http://localhost:5000/friends/${userId}`);\n      setFriends(friendsResponse.data);\n      const eventsResponse = await axios.get(`http://localhost:5000/schedule/${userId}`);\n      setEvents(eventsResponse.data.map(event => ({\n        title: event.title,\n        start: new Date(event.start_time),\n        // Keep in UTC\n        end: new Date(event.end_time) // Keep in UTC\n      })));\n    } catch (error) {\n      console.error('Error fetching friends and events:', error);\n    }\n  };\n\n  // Handle user registration\n  const handleRegister = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/register', {\n        username,\n        password,\n        timezone\n      });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      setTimezone('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert(error.response.data.message);\n    }\n  };\n\n  // Handle user login\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/login', {\n        username,\n        password\n      });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert('Invalid credentials');\n    }\n  };\n\n  // Handle user logout\n  const handleLogout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n    setFriends([]);\n    setEvents([]);\n  };\n\n  // Fetch friend's events and open the calendar modal\n  const handleShowFriendCalendar = async friendId => {\n    try {\n      const response = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n      const friendResponse = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friendResponse.data.timezone;\n      const events = await Promise.all(response.data.map(async event => {\n        const startTime = await convertTimeToUserTimezone(event.start_time, friendTimezone, currentUser.timezone);\n        const endTime = await convertTimeToUserTimezone(event.end_time, friendTimezone, currentUser.timezone);\n        return {\n          title: event.title,\n          start: startTime,\n          end: endTime\n        };\n      }));\n      setFriendEvents(events);\n      setIsModalOpen(true); // Open the calendar modal\n    } catch (error) {\n      console.error('Error fetching friend\\'s schedule:', error);\n    }\n  };\n\n  // Find optimal time for a call with a friend\n  const handleFindOptimalTime = async (friendId, duration) => {\n    try {\n      const friend = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friend.data.timezone;\n      const friendData = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n      const friendEvents = friendData.data.map(event => ({\n        start: new Date(event.start_time),\n        end: new Date(event.end_time)\n      }));\n      const userEvents = events.map(event => ({\n        start: new Date(event.start),\n        end: new Date(event.end)\n      }));\n      const freeTimes = [];\n      for (let i = 0; i < friendEvents.length; i++) {\n        let isFree = true;\n        for (let j = 0; j < userEvents.length; j++) {\n          if (friendEvents[i].start < userEvents[j].end && friendEvents[i].end > userEvents[j].start) {\n            isFree = false;\n            break;\n          }\n        }\n        if (isFree) {\n          const friendStartLocal = await convertTimeToUserTimezone(friendEvents[i].start, 'UTC', friendTimezone);\n          const friendEndLocal = await convertTimeToUserTimezone(friendEvents[i].end, 'UTC', friendTimezone);\n          const userStartLocal = await convertTimeToUserTimezone(friendEvents[i].start, 'UTC', currentUser.timezone);\n          const userEndLocal = await convertTimeToUserTimezone(friendEvents[i].end, 'UTC', currentUser.timezone);\n          const callDurationInMs = duration * 60 * 1000;\n          if (friendEndLocal - friendStartLocal >= callDurationInMs && userEndLocal - userStartLocal >= callDurationInMs) {\n            const callStartTime = new Date(Math.max(friendStartLocal.getTime(), userStartLocal.getTime()));\n            const callEndTime = new Date(callStartTime.getTime() + callDurationInMs);\n            freeTimes.push({\n              start: callStartTime,\n              end: callEndTime\n            });\n          }\n        }\n      }\n      setOptimalTimes(freeTimes); // Set the optimal times\n      setIsCallModalOpen(true); // Open the modal for optimal call times\n    } catch (error) {\n      console.error('Error finding optimal time:', error);\n    }\n  };\n\n  // Close the calendar modal\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  // Close the call modal\n  const handleCloseCallModal = () => {\n    setIsCallModalOpen(false);\n  };\n\n  // Time zone conversion API function using timeapi.io\n  const convertTimeToUserTimezone = async (time, fromTimezone, toTimezone) => {\n    const newTime = formatDateToCustomFormat(time);\n    try {\n      const response = await axios.post(TIME_API_URL, {\n        fromTimeZone: fromTimezone,\n        dateTime: newTime,\n        toTimeZone: toTimezone,\n        dstAmbiguity: \"\"\n      });\n      return new Date(response.data.conversionResult.dateTime);\n    } catch (error) {\n      console.error('Error converting time zone:', error);\n      return new Date(time);\n    }\n  };\n\n  // Format date to custom format\n  function formatDateToCustomFormat(isoDate) {\n    const date = new Date(isoDate);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}`;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ScheduleMate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), !currentUser ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: timezone,\n        onChange: e => setTimezone(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Timezone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), timezones.map(tz => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: tz,\n          children: tz\n        }, tz, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRegister,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome, \", currentUser.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Friends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: friends.map(friend => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleShowFriendCalendar(friend.id),\n            children: friend.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setSelectedFriendId(friend.id);\n              setIsCallModalOpen(true);\n            },\n            children: \"Find Optimal Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 17\n          }, this)]\n        }, friend.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen,\n        onClose: handleCloseModal,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Friend's Calendar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n          localizer: localizer,\n          events: friendEvents,\n          startAccessor: \"start\",\n          endAccessor: \"end\",\n          style: {\n            height: 400\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isCallModalOpen,\n        onClose: handleCloseCallModal,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Find Optimal Call Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Call duration (minutes)\",\n          value: callDuration,\n          onChange: e => setCallDuration(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleFindOptimalTime(selectedFriendId, callDuration),\n          children: \"Find Optimal Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), optimalTimes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You should definitely call at: \", optimalTimes[0].start.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lVGL6faFTBysEhZM4mP9OPQWEHc=\");\n_c = App;\nexport default App;\n\n// Modal Component\nconst Modal = ({\n  isOpen,\n  onClose,\n  children\n}) => {\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: modalStyles.overlay,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: modalStyles.modal,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        style: modalStyles.closeButton,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Modal;\nconst modalStyles = {\n  overlay: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1000\n  },\n  modal: {\n    backgroundColor: '#fff',\n    padding: '20px',\n    borderRadius: '8px',\n    maxWidth: '600px',\n    width: '100%'\n  },\n  closeButton: {\n    float: 'right',\n    backgroundColor: '#f44336',\n    color: 'white',\n    border: 'none',\n    padding: '5px 10px',\n    cursor: 'pointer',\n    borderRadius: '5px'\n  }\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Modal\");","map":{"version":3,"names":["React","useState","useEffect","axios","Calendar","momentLocalizer","moment","jsxDEV","_jsxDEV","timezones","localizer","TIME_API_URL","App","_s","currentUser","setCurrentUser","username","setUsername","password","setPassword","timezone","setTimezone","friendUsername","setFriendUsername","friends","setFriends","newEvent","setNewEvent","title","startTime","endTime","events","setEvents","friendEvents","setFriendEvents","isModalOpen","setIsModalOpen","isCallModalOpen","setIsCallModalOpen","callDuration","setCallDuration","optimalTimes","setOptimalTimes","selectedFriendId","setSelectedFriendId","storedUser","localStorage","getItem","user","JSON","parse","fetchFriendsAndEvents","id","userId","friendsResponse","get","data","eventsResponse","map","event","start","Date","start_time","end","end_time","error","console","handleRegister","response","post","setItem","stringify","alert","message","handleLogin","handleLogout","removeItem","handleShowFriendCalendar","friendId","friendResponse","friendTimezone","Promise","all","convertTimeToUserTimezone","handleFindOptimalTime","duration","friend","friendData","userEvents","freeTimes","i","length","isFree","j","friendStartLocal","friendEndLocal","userStartLocal","userEndLocal","callDurationInMs","callStartTime","Math","max","getTime","callEndTime","push","handleCloseModal","handleCloseCallModal","time","fromTimezone","toTimezone","newTime","formatDateToCustomFormat","fromTimeZone","dateTime","toTimeZone","dstAmbiguity","conversionResult","isoDate","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","tz","onClick","Modal","isOpen","onClose","startAccessor","endAccessor","style","height","toLocaleString","_c","modalStyles","overlay","modal","closeButton","_c2","position","top","left","right","bottom","backgroundColor","display","justifyContent","alignItems","zIndex","padding","borderRadius","maxWidth","width","float","color","border","cursor","$RefreshReg$"],"sources":["/Users/izah/Desktop/schedulemate/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\n// Example list of time zones\nconst timezones = [\n  \"America/New_York\", \"America/Chicago\", \"America/Los_Angeles\", \"Europe/London\", \"Europe/Paris\",\n  \"Asia/Dubai\", \"Asia/Tokyo\", \"Asia/Kolkata\", \"Australia/Sydney\", \"UTC\"\n];\n\nconst localizer = momentLocalizer(moment);\n\n// TimeAPI.io API URL (new API)\nconst TIME_API_URL = \"https://timeapi.io/api/Conversion/ConvertTimeZone\";\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [timezone, setTimezone] = useState('');\n  const [friendUsername, setFriendUsername] = useState('');\n  const [friends, setFriends] = useState([]);\n  const [newEvent, setNewEvent] = useState({ title: '', startTime: '', endTime: '' });\n  const [events, setEvents] = useState([]);\n  const [friendEvents, setFriendEvents] = useState([]);  // Friend's events for calendar\n  const [isModalOpen, setIsModalOpen] = useState(false); // For friend's calendar modal\n  const [isCallModalOpen, setIsCallModalOpen] = useState(false); // For call duration modal\n  const [callDuration, setCallDuration] = useState(''); // Call duration in minutes\n  const [optimalTimes, setOptimalTimes] = useState([]); // Optimal times for the call\n  const [selectedFriendId, setSelectedFriendId] = useState(null); // Track selected friend ID\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      setCurrentUser(user);\n      fetchFriendsAndEvents(user.id);\n    }\n  }, []);\n\n  // Fetch user's friends and events\n  const fetchFriendsAndEvents = async (userId) => {\n    try {\n      const friendsResponse = await axios.get(`http://localhost:5000/friends/${userId}`);\n      setFriends(friendsResponse.data);\n\n      const eventsResponse = await axios.get(`http://localhost:5000/schedule/${userId}`);\n      setEvents(\n        eventsResponse.data.map(event => ({\n          title: event.title,\n          start: new Date(event.start_time), // Keep in UTC\n          end: new Date(event.end_time),     // Keep in UTC\n        }))\n      );\n    } catch (error) {\n      console.error('Error fetching friends and events:', error);\n    }\n  };\n\n  // Handle user registration\n  const handleRegister = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/register', { username, password, timezone });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      setTimezone('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert(error.response.data.message);\n    }\n  };\n\n  // Handle user login\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/login', { username, password });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert('Invalid credentials');\n    }\n  };\n\n  // Handle user logout\n  const handleLogout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n    setFriends([]);\n    setEvents([]);\n  };\n\n  // Fetch friend's events and open the calendar modal\n  const handleShowFriendCalendar = async (friendId) => {\n    try {\n      const response = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n      \n      const friendResponse = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friendResponse.data.timezone;\n\n      const events = await Promise.all(response.data.map(async (event) => {\n        const startTime = await convertTimeToUserTimezone(event.start_time, friendTimezone, currentUser.timezone);\n        const endTime = await convertTimeToUserTimezone(event.end_time, friendTimezone, currentUser.timezone);\n        return {\n          title: event.title,\n          start: startTime,\n          end: endTime,\n        };\n      }));\n\n      setFriendEvents(events);\n      setIsModalOpen(true); // Open the calendar modal\n    } catch (error) {\n      console.error('Error fetching friend\\'s schedule:', error);\n    }\n  };\n\n  // Find optimal time for a call with a friend\n  const handleFindOptimalTime = async (friendId, duration) => {\n    try {\n      const friend = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friend.data.timezone;\n  \n      const friendData = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n      const friendEvents = friendData.data.map(event => ({\n        start: new Date(event.start_time),\n        end: new Date(event.end_time),\n      }));\n  \n      const userEvents = events.map(event => ({ start: new Date(event.start), end: new Date(event.end) }));\n  \n      const freeTimes = [];\n  \n      for (let i = 0; i < friendEvents.length; i++) {\n        let isFree = true;\n  \n        for (let j = 0; j < userEvents.length; j++) {\n          if (friendEvents[i].start < userEvents[j].end && friendEvents[i].end > userEvents[j].start) {\n            isFree = false;\n            break;\n          }\n        }\n  \n        if (isFree) {\n          const friendStartLocal = await convertTimeToUserTimezone(friendEvents[i].start, 'UTC', friendTimezone);\n          const friendEndLocal = await convertTimeToUserTimezone(friendEvents[i].end, 'UTC', friendTimezone);\n          const userStartLocal = await convertTimeToUserTimezone(friendEvents[i].start, 'UTC', currentUser.timezone);\n          const userEndLocal = await convertTimeToUserTimezone(friendEvents[i].end, 'UTC', currentUser.timezone);\n  \n          const callDurationInMs = duration * 60 * 1000;\n  \n          if (friendEndLocal - friendStartLocal >= callDurationInMs && userEndLocal - userStartLocal >= callDurationInMs) {\n            const callStartTime = new Date(Math.max(friendStartLocal.getTime(), userStartLocal.getTime()));\n            const callEndTime = new Date(callStartTime.getTime() + callDurationInMs);\n            freeTimes.push({ start: callStartTime, end: callEndTime });\n          }\n        }\n      }\n  \n      setOptimalTimes(freeTimes); // Set the optimal times\n      setIsCallModalOpen(true);   // Open the modal for optimal call times\n    } catch (error) {\n      console.error('Error finding optimal time:', error);\n    }\n  };\n\n  // Close the calendar modal\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  // Close the call modal\n  const handleCloseCallModal = () => {\n    setIsCallModalOpen(false);\n  };\n\n  // Time zone conversion API function using timeapi.io\n  const convertTimeToUserTimezone = async (time, fromTimezone, toTimezone) => {\n    const newTime = formatDateToCustomFormat(time);\n    try {\n      const response = await axios.post(TIME_API_URL, {\n        fromTimeZone: fromTimezone,\n        dateTime: newTime,\n        toTimeZone: toTimezone,\n        dstAmbiguity: \"\"\n      });\n      return new Date(response.data.conversionResult.dateTime);\n    } catch (error) {\n      console.error('Error converting time zone:', error);\n      return new Date(time);\n    }\n  };\n\n  // Format date to custom format\n  function formatDateToCustomFormat(isoDate) {\n    const date = new Date(isoDate);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}`;\n  }\n\n  return (\n    <div>\n      <h1>ScheduleMate</h1>\n      {!currentUser ? (\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            value={username}\n            onChange={e => setUsername(e.target.value)}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            value={password}\n            onChange={e => setPassword(e.target.value)}\n          />\n          \n          {/* Dropdown for Timezone */}\n          <select value={timezone} onChange={e => setTimezone(e.target.value)}>\n            <option value=\"\">Select Timezone</option>\n            {timezones.map(tz => (\n              <option key={tz} value={tz}>\n                {tz}\n              </option>\n            ))}\n          </select>\n\n          <button onClick={handleLogin}>Login</button>\n          <button onClick={handleRegister}>Register</button>\n        </div>\n      ) : (\n        <div>\n          <h1>Welcome, {currentUser.username}</h1>\n          <button onClick={handleLogout}>Logout</button>\n\n          <h2>Your Friends</h2>\n          <ul>\n            {friends.map(friend => (\n              <li key={friend.id}>\n                <button onClick={() => handleShowFriendCalendar(friend.id)}>\n                  {friend.username}\n                </button>\n\n                <button onClick={() => { setSelectedFriendId(friend.id); setIsCallModalOpen(true); }}>\n                  Find Optimal Time\n                </button>\n              </li>\n            ))}\n          </ul>\n\n          {/* Friend's calendar modal */}\n          <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n            <h2>Friend's Calendar</h2>\n            <Calendar\n              localizer={localizer}\n              events={friendEvents}\n              startAccessor=\"start\"\n              endAccessor=\"end\"\n              style={{ height: 400 }}\n            />\n          </Modal>\n\n          {/* Call duration modal */}\n          <Modal isOpen={isCallModalOpen} onClose={handleCloseCallModal}>\n            <h2>Find Optimal Call Time</h2>\n            <input\n              type=\"number\"\n              placeholder=\"Call duration (minutes)\"\n              value={callDuration}\n              onChange={(e) => setCallDuration(e.target.value)}\n            />\n            <button onClick={() => handleFindOptimalTime(selectedFriendId, callDuration)}>\n              Find Optimal Time\n            </button>\n\n            {optimalTimes.length > 0 && (\n              <div>\n                <p>You should definitely call at: {optimalTimes[0].start.toLocaleString()}</p>\n              </div>\n            )}\n          </Modal>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// Modal Component\nconst Modal = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div style={modalStyles.overlay}>\n      <div style={modalStyles.modal}>\n        <button onClick={onClose} style={modalStyles.closeButton}>Close</button>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nconst modalStyles = {\n  overlay: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1000,\n  },\n  modal: {\n    backgroundColor: '#fff',\n    padding: '20px',\n    borderRadius: '8px',\n    maxWidth: '600px',\n    width: '100%',\n  },\n  closeButton: {\n    float: 'right',\n    backgroundColor: '#f44336',\n    color: 'white',\n    border: 'none',\n    padding: '5px 10px',\n    cursor: 'pointer',\n    borderRadius: '5px',\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}