{"ast":null,"code":"var _jsxFileName = \"/Users/izah/Desktop/schedulemate/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport './App.css';\n\n// Example list of time zones\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst timezones = [\"America/New_York\", \"America/Chicago\", \"America/Los_Angeles\", \"Europe/London\", \"Europe/Paris\", \"Asia/Dubai\", \"Asia/Tokyo\", \"Asia/Kolkata\", \"Australia/Sydney\", \"UTC\"];\nconst localizer = momentLocalizer(moment);\n\n// TimeAPI.io API URL (new API)\nconst TIME_API_URL = \"https://timeapi.io/api/Conversion/ConvertTimeZone\";\nfunction App() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [timezone, setTimezone] = useState('');\n  const [friendUsername, setFriendUsername] = useState('');\n  const [friends, setFriends] = useState([]);\n  const [newEvent, setNewEvent] = useState({\n    title: '',\n    startTime: '',\n    endTime: ''\n  });\n  const [events, setEvents] = useState([]);\n  const [friendEvents, setFriendEvents] = useState([]); // Friend's events for calendar\n  const [isModalOpen, setIsModalOpen] = useState(false); // To control modal visibility\n  const [callDuration, setCallDuration] = useState(''); // Call duration in minutes\n  const [optimalTimes, setOptimalTimes] = useState([]); // Optimal times for the call\n  const [selectedFriendId, setSelectedFriendId] = useState(null);\n  const [showOptimalTimeModal, setShowOptimalTimeModal] = useState(false); // To control the \"Find Optimal Time\" modal\n\n  // Check localStorage for user info when the app loads\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      setCurrentUser(user);\n      fetchFriendsAndEvents(user.id);\n    }\n  }, []);\n\n  // Fetch user's friends and events\n  const fetchFriendsAndEvents = async userId => {\n    try {\n      const friendsResponse = await axios.get(`http://localhost:5000/friends/${userId}`);\n      setFriends(friendsResponse.data);\n      const eventsResponse = await axios.get(`http://localhost:5000/schedule/${userId}`);\n      setEvents(eventsResponse.data.map(event => ({\n        title: event.title,\n        start: new Date(event.start_time),\n        // Keep in UTC\n        end: new Date(event.end_time) // Keep in UTC\n      })));\n    } catch (error) {\n      console.error('Error fetching friends and events:', error);\n    }\n  };\n\n  // Register new user with timezone\n  const handleRegister = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/register', {\n        username,\n        password,\n        timezone\n      });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      setTimezone('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert(error.response.data.message);\n    }\n  };\n\n  // Login user\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/login', {\n        username,\n        password\n      });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert('Invalid credentials');\n    }\n  };\n\n  // Logout user\n  const handleLogout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n    setFriends([]);\n    setEvents([]);\n  };\n\n  // Add a new event \n  const handleAddEvent = () => {\n    const utcStartTime = new Date(newEvent.startTime).toISOString(); // Convert to UTC\n    const utcEndTime = new Date(newEvent.endTime).toISOString(); // Convert to UTC\n\n    axios.post('http://localhost:5000/add-event', {\n      userId: currentUser.id,\n      title: newEvent.title,\n      startTime: utcStartTime,\n      endTime: utcEndTime\n    }).then(response => {\n      setNewEvent({\n        title: '',\n        startTime: '',\n        endTime: ''\n      });\n      setEvents([...events, {\n        title: response.data.title,\n        start: new Date(response.data.start_time),\n        end: new Date(response.data.end_time)\n      }]);\n    }).catch(error => {\n      alert(error.response.data.message);\n    });\n  };\n\n  // Add a friend by username\n  const handleAddFriend = () => {\n    axios.post('http://localhost:5000/add-friend', {\n      userId: currentUser.id,\n      friendUsername\n    }).then(response => {\n      alert(`${friendUsername} added as a friend`);\n      setFriendUsername('');\n      fetchFriendsAndEvents(currentUser.id);\n    }).catch(error => {\n      alert(error.response.data.message);\n    });\n  };\n\n  // Fetch friend's events and open the modal (convert UTC to current user's timezone using API)\n  const handleShowFriendCalendar = async friendId => {\n    try {\n      // Fetch friend's schedule\n      const response = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n\n      // Fetch friend's time zone from the users table\n      const friendResponse = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friendResponse.data.timezone;\n      console.log('Friend timezone:', friendTimezone);\n\n      // Map through the events and convert the start and end times to the current user's time zone\n      const events = await Promise.all(response.data.map(async event => {\n        // Convert the event's start and end times from the friend's time zone to the current user's time zone\n        const startTime = await convertTimeToUserTimezone(event.start_time, friendTimezone, currentUser.timezone);\n        const endTime = await convertTimeToUserTimezone(event.end_time, friendTimezone, currentUser.timezone);\n        console.log('In show friends calendar', startTime, endTime);\n\n        // Return the event with the converted start and end times\n        return {\n          title: event.title,\n          start: startTime,\n          // Converted to user's time zone\n          end: endTime // Converted to user's time zone\n        };\n      }));\n\n      // Set the friend's events to display in the calendar\n      setFriendEvents(events);\n      setIsModalOpen(true); // Open the modal to show friend's calendar\n    } catch (error) {\n      console.error('Error fetching friend\\'s schedule:', error);\n    }\n  };\n\n  // Find optimal time for a call with a friend\n  const handleFindOptimalTime = async (friendId, duration) => {\n    try {\n      // Fetch friend's timezone and events\n      const friend = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friend.data.timezone;\n      const friendData = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n      const friendEvents = friendData.data.map(event => ({\n        start: new Date(event.start_time),\n        end: new Date(event.end_time)\n      }));\n\n      // Fetch current user's events\n      const userEvents = events.map(event => ({\n        start: new Date(event.start),\n        end: new Date(event.end)\n      }));\n      const freeTimes = [];\n\n      // Loop through friend's events\n      for (let i = 0; i < friendEvents.length; i++) {\n        let isFree = true;\n\n        // Check if friend is free during user's events\n        for (let j = 0; j < userEvents.length; j++) {\n          if (friendEvents[i].start < userEvents[j].end && friendEvents[i].end > userEvents[j].start) {\n            isFree = false;\n            break;\n          }\n        }\n        if (isFree) {\n          // Convert friend's event times to friend's local timezone\n          const friendStartLocal = await convertTimeToUserTimezone(friendEvents[i].start, 'UTC', friendTimezone);\n          const friendEndLocal = await convertTimeToUserTimezone(friendEvents[i].end, 'UTC', friendTimezone);\n\n          // Convert user's event times to user's local timezone\n          const userStartLocal = await convertTimeToUserTimezone(friendEvents[i].start, 'UTC', currentUser.timezone);\n          const userEndLocal = await convertTimeToUserTimezone(friendEvents[i].end, 'UTC', currentUser.timezone);\n\n          // Check if both the user and friend are free before midnight in their local time zones\n          const friendStartHour = friendStartLocal.getHours();\n          const friendEndHour = friendEndLocal.getHours();\n          const userStartHour = userStartLocal.getHours();\n          const userEndHour = userEndLocal.getHours();\n          if (friendStartHour < 24 && friendEndHour < 24 && userStartHour < 24 && userEndHour < 24) {\n            // Calculate available time window for the friend and user\n            const friendAvailableTime = friendEndLocal - friendStartLocal; // in milliseconds\n            const userAvailableTime = userEndLocal - userStartLocal; // in milliseconds\n\n            // Convert call duration from minutes to milliseconds\n            const callDurationInMs = duration * 60 * 1000; // duration is passed as minutes\n\n            // Check if both user and friend have enough free time for the call duration\n            if (friendAvailableTime >= callDurationInMs && userAvailableTime >= callDurationInMs) {\n              // Add the start time for the call (suggest the earlier available time window)\n              const callStartTime = new Date(Math.max(friendStartLocal.getTime(), userStartLocal.getTime()));\n              const callEndTime = new Date(callStartTime.getTime() + callDurationInMs);\n\n              // Add the start and end time for the suggested call duration\n              freeTimes.push({\n                start: callStartTime,\n                end: callEndTime\n              });\n            }\n          }\n        }\n      }\n      console.log('Free times:', freeTimes);\n      return setOptimalTimes(freeTimes);\n    } catch (error) {\n      console.error('Error finding optimal time:', error);\n    }\n  };\n\n  // Close the modal\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setShowOptimalTimeModal(false); // Close both modals when closing\n  };\n  function formatDateToCustomFormat(isoDate) {\n    const date = new Date(isoDate);\n\n    // Extract date parts\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed, so +1\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n  }\n\n  // Time zone conversion API function using timeapi.io\n  const convertTimeToUserTimezone = async (time, fromTimezone, toTimezone) => {\n    const newTime = formatDateToCustomFormat(time);\n    console.log('Converting time:', newTime, 'from', fromTimezone, 'to', toTimezone);\n    try {\n      // Call timeapi.io to convert the time from one timezone to another\n      const response = await axios.post(TIME_API_URL, {\n        fromTimeZone: fromTimezone,\n        // Friend's time zone (or source time zone)\n        dateTime: newTime,\n        // Time in ISO format\n        toTimeZone: toTimezone,\n        // User's time zone (or target time zone)\n        dstAmbiguity: \"\" // Optional field for handling DST ambiguities\n      });\n      console.log('Converted time:', response.data.conversionResult.dateTime);\n\n      //date time is in format 2024-10-23T06:00:00\n\n      // Return the converted time.... to do\n      return new Date(response.data.conversionResult.dateTime);\n    } catch (error) {\n      console.error('Error converting time zone:', error);\n      return new Date(time); // Fallback to original time if the API fails\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \":\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), !currentUser ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"User-auth-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ScheduleMate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: timezone,\n        onChange: e => setTimezone(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Timezone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this), timezones.map(tz => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: tz,\n          children: tz\n        }, tz, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRegister,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome, \", currentUser.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Friends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: friends.map(friend => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/\",\n            onClick: () => handleShowFriendCalendar(friend.id),\n            children: friend.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setSelectedFriendId(friend.id);\n              setIsModalOpen(true);\n              setShowOptimalTimeModal(true);\n            },\n            children: \"Find Optimal Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this)]\n        }, friend.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add a Friend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Friend's Username\",\n        value: friendUsername,\n        onChange: e => setFriendUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddFriend,\n        children: \"Add Friend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add Event to Your Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Event Title\",\n        value: newEvent.title,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        placeholder: \"Start Time\",\n        value: newEvent.startTime,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          startTime: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        placeholder: \"End Time\",\n        value: newEvent.endTime,\n        onChange: e => setNewEvent({\n          ...newEvent,\n          endTime: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddEvent,\n        children: \"Add Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n        localizer: localizer,\n        events: events.map(event => ({\n          title: event.title,\n          start: new Date(event.start),\n          // Show in user's timezone (React Big Calendar accepts valid Date objects)\n          end: new Date(event.end) // Show in user's timezone\n        })),\n        startAccessor: \"start\",\n        endAccessor: \"end\",\n        style: {\n          height: 500,\n          margin: \"50px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen && !showOptimalTimeModal,\n        onClose: handleCloseModal,\n        children: [/*#__PURE__*/_jsxDEV(Calendar, {\n          localizer: localizer,\n          events: friendEvents.length > 0 ? friendEvents.map(event => ({\n            title: event.title,\n            start: new Date(event.start),\n            end: new Date(event.end)\n          })) : [],\n          startAccessor: \"start\",\n          endAccessor: \"end\",\n          style: {\n            height: 400,\n            margin: \"50px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this), friendEvents.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This friend has no scheduled events.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen && showOptimalTimeModal,\n        onClose: handleCloseModal,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Find Optimal Call Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Call duration (minutes)\",\n          value: callDuration,\n          onChange: e => setCallDuration(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleFindOptimalTime(selectedFriendId, callDuration),\n          children: \"Find Optimal Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this), optimalTimes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: optimalTimes.map((slot, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"You can call from \", slot.start.toString(), \" to \", slot.end.toString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 21\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Q0E62vTE4P3jo9ItTxT3KrM+FBc=\");\n_c = App;\nexport default App;\n\n// Modal Component\nconst Modal = ({\n  isOpen,\n  onClose,\n  children\n}) => {\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: modalStyles.overlay,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: modalStyles.modal,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        style: modalStyles.closeButton,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 449,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Modal;\nconst modalStyles = {\n  overlay: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1000\n  },\n  modal: {\n    backgroundColor: '#fff',\n    padding: '20px',\n    borderRadius: '8px',\n    maxWidth: '600px',\n    width: '100%'\n  },\n  closeButton: {\n    float: 'right',\n    backgroundColor: '#f44336',\n    color: 'white',\n    border: 'none',\n    padding: '5px 10px',\n    cursor: 'pointer',\n    borderRadius: '5px'\n  }\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Modal\");","map":{"version":3,"names":["React","useState","useEffect","axios","Calendar","momentLocalizer","moment","jsxDEV","_jsxDEV","timezones","localizer","TIME_API_URL","App","_s","currentUser","setCurrentUser","username","setUsername","password","setPassword","timezone","setTimezone","friendUsername","setFriendUsername","friends","setFriends","newEvent","setNewEvent","title","startTime","endTime","events","setEvents","friendEvents","setFriendEvents","isModalOpen","setIsModalOpen","callDuration","setCallDuration","optimalTimes","setOptimalTimes","selectedFriendId","setSelectedFriendId","showOptimalTimeModal","setShowOptimalTimeModal","storedUser","localStorage","getItem","user","JSON","parse","fetchFriendsAndEvents","id","userId","friendsResponse","get","data","eventsResponse","map","event","start","Date","start_time","end","end_time","error","console","handleRegister","response","post","setItem","stringify","alert","message","handleLogin","handleLogout","removeItem","handleAddEvent","utcStartTime","toISOString","utcEndTime","then","catch","handleAddFriend","handleShowFriendCalendar","friendId","friendResponse","friendTimezone","log","Promise","all","convertTimeToUserTimezone","handleFindOptimalTime","duration","friend","friendData","userEvents","freeTimes","i","length","isFree","j","friendStartLocal","friendEndLocal","userStartLocal","userEndLocal","friendStartHour","getHours","friendEndHour","userStartHour","userEndHour","friendAvailableTime","userAvailableTime","callDurationInMs","callStartTime","Math","max","getTime","callEndTime","push","handleCloseModal","formatDateToCustomFormat","isoDate","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","minutes","getMinutes","seconds","getSeconds","time","fromTimezone","toTimezone","newTime","fromTimeZone","dateTime","toTimeZone","dstAmbiguity","conversionResult","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","tz","onClick","href","startAccessor","endAccessor","style","height","margin","Modal","isOpen","onClose","slot","index","toString","_c","modalStyles","overlay","modal","closeButton","_c2","position","top","left","right","bottom","backgroundColor","display","justifyContent","alignItems","zIndex","padding","borderRadius","maxWidth","width","float","color","border","cursor","$RefreshReg$"],"sources":["/Users/izah/Desktop/schedulemate/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport './App.css';\n\n\n// Example list of time zones\nconst timezones = [\n  \"America/New_York\", \"America/Chicago\", \"America/Los_Angeles\", \"Europe/London\", \"Europe/Paris\",\n  \"Asia/Dubai\", \"Asia/Tokyo\", \"Asia/Kolkata\", \"Australia/Sydney\", \"UTC\"\n];\n\nconst localizer = momentLocalizer(moment);\n\n// TimeAPI.io API URL (new API)\nconst TIME_API_URL = \"https://timeapi.io/api/Conversion/ConvertTimeZone\";\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [timezone, setTimezone] = useState('');\n  const [friendUsername, setFriendUsername] = useState('');\n  const [friends, setFriends] = useState([]);\n  const [newEvent, setNewEvent] = useState({ title: '', startTime: '', endTime: '' });\n  const [events, setEvents] = useState([]);\n  const [friendEvents, setFriendEvents] = useState([]);  // Friend's events for calendar\n  const [isModalOpen, setIsModalOpen] = useState(false); // To control modal visibility\n  const [callDuration, setCallDuration] = useState(''); // Call duration in minutes\n  const [optimalTimes, setOptimalTimes] = useState([]); // Optimal times for the call\n  const [selectedFriendId, setSelectedFriendId] = useState(null);\n  const [showOptimalTimeModal, setShowOptimalTimeModal] = useState(false); // To control the \"Find Optimal Time\" modal\n\n\n\n\n  // Check localStorage for user info when the app loads\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      setCurrentUser(user);\n      fetchFriendsAndEvents(user.id);\n    }\n  }, []);\n\n  // Fetch user's friends and events\n  const fetchFriendsAndEvents = async (userId) => {\n    try {\n      const friendsResponse = await axios.get(`http://localhost:5000/friends/${userId}`);\n      setFriends(friendsResponse.data);\n\n      const eventsResponse = await axios.get(`http://localhost:5000/schedule/${userId}`);\n      setEvents(\n        eventsResponse.data.map(event => ({\n          title: event.title,\n          start: new Date(event.start_time), // Keep in UTC\n          end: new Date(event.end_time),     // Keep in UTC\n        }))\n      );\n    } catch (error) {\n      console.error('Error fetching friends and events:', error);\n    }\n  };\n\n  // Register new user with timezone\n  const handleRegister = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/register', { username, password, timezone });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      setTimezone('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert(error.response.data.message);\n    }\n  };\n\n  // Login user\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/login', { username, password });\n      setCurrentUser(response.data);\n      localStorage.setItem('currentUser', JSON.stringify(response.data));\n      setUsername('');\n      setPassword('');\n      fetchFriendsAndEvents(response.data.id);\n    } catch (error) {\n      alert('Invalid credentials');\n    }\n  };\n\n  // Logout user\n  const handleLogout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n    setFriends([]);\n    setEvents([]);\n  };\n\n  // Add a new event \n  const handleAddEvent = () => {\n    const utcStartTime = new Date(newEvent.startTime).toISOString();  // Convert to UTC\n    const utcEndTime = new Date(newEvent.endTime).toISOString();      // Convert to UTC\n\n    axios.post('http://localhost:5000/add-event', {\n      userId: currentUser.id,\n      title: newEvent.title,\n      startTime: utcStartTime,\n      endTime: utcEndTime\n    })\n    .then(response => {\n      setNewEvent({ title: '', startTime: '', endTime: '' });\n      setEvents([...events, {\n        title: response.data.title,\n        start: new Date(response.data.start_time),\n        end: new Date(response.data.end_time),\n      }]);\n    })\n    .catch(error => {\n      alert(error.response.data.message);\n    });\n  };\n\n  // Add a friend by username\n  const handleAddFriend = () => {\n    axios.post('http://localhost:5000/add-friend', { userId: currentUser.id, friendUsername })\n      .then(response => {\n        alert(`${friendUsername} added as a friend`);\n        setFriendUsername('');\n        fetchFriendsAndEvents(currentUser.id);\n      })\n      .catch(error => {\n        alert(error.response.data.message);\n      });\n  };\n\n  // Fetch friend's events and open the modal (convert UTC to current user's timezone using API)\n  const handleShowFriendCalendar = async (friendId) => {\n    try {\n      // Fetch friend's schedule\n      const response = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n      \n      // Fetch friend's time zone from the users table\n      const friendResponse = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friendResponse.data.timezone;\n      console.log('Friend timezone:', friendTimezone);\n      \n      // Map through the events and convert the start and end times to the current user's time zone\n      const events = await Promise.all(response.data.map(async (event) => {\n        // Convert the event's start and end times from the friend's time zone to the current user's time zone\n        const startTime = await convertTimeToUserTimezone(event.start_time, friendTimezone, currentUser.timezone);\n        const endTime = await convertTimeToUserTimezone(event.end_time, friendTimezone, currentUser.timezone);\n\n        console.log('In show friends calendar', startTime, endTime);\n\n        // Return the event with the converted start and end times\n        return {\n          title: event.title,\n          start: startTime, // Converted to user's time zone\n          end: endTime,     // Converted to user's time zone\n        };\n      }));\n\n      // Set the friend's events to display in the calendar\n      setFriendEvents(events);\n      setIsModalOpen(true);  // Open the modal to show friend's calendar\n    } catch (error) {\n      console.error('Error fetching friend\\'s schedule:', error);\n    }\n};\n\n  // Find optimal time for a call with a friend\n  const handleFindOptimalTime = async (friendId, duration) => {\n    try {\n      // Fetch friend's timezone and events\n      const friend = await axios.get(`http://localhost:5000/user/${friendId}`);\n      const friendTimezone = friend.data.timezone;\n  \n      const friendData = await axios.get(`http://localhost:5000/schedule/${friendId}`);\n      const friendEvents = friendData.data.map(event => ({\n        start: new Date(event.start_time),\n        end: new Date(event.end_time),\n      }));\n  \n      // Fetch current user's events\n      const userEvents = events.map(event => ({ start: new Date(event.start), end: new Date(event.end) }));\n  \n      const freeTimes = [];\n  \n      // Loop through friend's events\n      for (let i = 0; i < friendEvents.length; i++) {\n        let isFree = true;\n  \n        // Check if friend is free during user's events\n        for (let j = 0; j < userEvents.length; j++) {\n          if (friendEvents[i].start < userEvents[j].end && friendEvents[i].end > userEvents[j].start) {\n            isFree = false;\n            break;\n          }\n        }\n  \n        if (isFree) {\n          // Convert friend's event times to friend's local timezone\n          const friendStartLocal = await convertTimeToUserTimezone(friendEvents[i].start, 'UTC', friendTimezone);\n          const friendEndLocal = await convertTimeToUserTimezone(friendEvents[i].end, 'UTC', friendTimezone);\n        \n          // Convert user's event times to user's local timezone\n          const userStartLocal = await convertTimeToUserTimezone(friendEvents[i].start, 'UTC', currentUser.timezone);\n          const userEndLocal = await convertTimeToUserTimezone(friendEvents[i].end, 'UTC', currentUser.timezone);\n        \n          // Check if both the user and friend are free before midnight in their local time zones\n          const friendStartHour = friendStartLocal.getHours();\n          const friendEndHour = friendEndLocal.getHours();\n          const userStartHour = userStartLocal.getHours();\n          const userEndHour = userEndLocal.getHours();\n        \n          if (friendStartHour < 24 && friendEndHour < 24 && userStartHour < 24 && userEndHour < 24) {\n            // Calculate available time window for the friend and user\n            const friendAvailableTime = friendEndLocal - friendStartLocal; // in milliseconds\n            const userAvailableTime = userEndLocal - userStartLocal; // in milliseconds\n        \n            // Convert call duration from minutes to milliseconds\n            const callDurationInMs = duration * 60 * 1000; // duration is passed as minutes\n        \n            // Check if both user and friend have enough free time for the call duration\n            if (friendAvailableTime >= callDurationInMs && userAvailableTime >= callDurationInMs) {\n              // Add the start time for the call (suggest the earlier available time window)\n              const callStartTime = new Date(Math.max(friendStartLocal.getTime(), userStartLocal.getTime()));\n              const callEndTime = new Date(callStartTime.getTime() + callDurationInMs);\n        \n              // Add the start and end time for the suggested call duration\n              freeTimes.push({ start: callStartTime, end: callEndTime });\n            }\n          }\n        }\n      }        \n  \n      console.log('Free times:', freeTimes);\n      return setOptimalTimes(freeTimes);\n    } catch (error) {\n      console.error('Error finding optimal time:', error);\n    }\n  };\n  \n\n\n  // Close the modal\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setShowOptimalTimeModal(false);  // Close both modals when closing\n  };\n  \n\n  function formatDateToCustomFormat(isoDate) {\n    const date = new Date(isoDate);\n  \n    // Extract date parts\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed, so +1\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n  \n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n  }\n\n  // Time zone conversion API function using timeapi.io\n  const convertTimeToUserTimezone = async (time, fromTimezone, toTimezone) => {\n    const newTime = formatDateToCustomFormat(time);\n    console.log('Converting time:', newTime, 'from', fromTimezone, 'to', toTimezone);\n\n    try {\n      // Call timeapi.io to convert the time from one timezone to another\n      const response = await axios.post(TIME_API_URL, {\n        fromTimeZone: fromTimezone,  // Friend's time zone (or source time zone)\n        dateTime: newTime,  // Time in ISO format\n        toTimeZone: toTimezone, // User's time zone (or target time zone)\n        dstAmbiguity: \"\"  // Optional field for handling DST ambiguities\n      });\n      console.log('Converted time:', response.data.conversionResult.dateTime);\n\n      //date time is in format 2024-10-23T06:00:00\n\n      // Return the converted time.... to do\n      return new Date(response.data.conversionResult.dateTime);\n    } catch (error) {\n      console.error('Error converting time zone:', error);\n      return new Date(time);  // Fallback to original time if the API fails\n    }\n};\n\n\n  return (\n\n    <div>\n      <h1>:</h1>\n      {!currentUser ? (\n        <div className='User-auth-page'>\n          <h1>ScheduleMate</h1>\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            value={username}\n            onChange={e => setUsername(e.target.value)}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            value={password}\n            onChange={e => setPassword(e.target.value)}\n          />\n          \n          {/* Dropdown for Timezone */}\n          <select value={timezone} onChange={e => setTimezone(e.target.value)}>\n            <option value=\"\">Select Timezone</option>\n            {timezones.map(tz => (\n              <option key={tz} value={tz}>\n                {tz}\n              </option>\n            ))}\n          </select>\n\n          <button onClick={handleLogin}>Login</button>\n          <button onClick={handleRegister}>Register</button>\n        </div>\n      ) : (\n        <div className='home-page'>\n          <h1>Welcome, {currentUser.username}</h1>\n          <button onClick={handleLogout}>Logout</button>\n\n          <h2>Your Friends</h2>\n          <ul>\n            {friends.map(friend => (\n              <li key={friend.id}>\n                {/* Show Friend's Calendar */}\n                <a href=\"/\" onClick={() => handleShowFriendCalendar(friend.id)}>{friend.username}</a>\n\n                {/* Find Optimal Time */}\n                <button onClick={() => { setSelectedFriendId(friend.id); setIsModalOpen(true); setShowOptimalTimeModal(true); }}>\n                  Find Optimal Time\n                </button>\n              </li>\n            ))}\n          </ul>\n\n          {/* Friend adding form */}\n          <h2>Add a Friend</h2>\n          <input\n            type=\"text\"\n            placeholder=\"Friend's Username\"\n            value={friendUsername}\n            onChange={e => setFriendUsername(e.target.value)}\n          />\n          <button onClick={handleAddFriend}>Add Friend</button> {/* Now using handleAddFriend */}\n\n          <h3>Add Event to Your Calendar</h3>\n          <input\n            type=\"text\"\n            placeholder=\"Event Title\"\n            value={newEvent.title}\n            onChange={e => setNewEvent({ ...newEvent, title: e.target.value })}\n          />\n          <input\n            type=\"datetime-local\"\n            placeholder=\"Start Time\"\n            value={newEvent.startTime}\n            onChange={e => setNewEvent({ ...newEvent, startTime: e.target.value })}\n          />\n          <input\n            type=\"datetime-local\"\n            placeholder=\"End Time\"\n            value={newEvent.endTime}\n            onChange={e => setNewEvent({ ...newEvent, endTime: e.target.value })}\n          />\n          <button onClick={handleAddEvent}>Add Event</button>\n\n          <h2>Your Calendar</h2>\n          <Calendar\n            localizer={localizer}\n            events={events.map(event => ({\n              title: event.title,\n              start: new Date(event.start), // Show in user's timezone (React Big Calendar accepts valid Date objects)\n              end: new Date(event.end),     // Show in user's timezone\n            }))}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            style={{ height: 500, margin: \"50px\" }}\n          />\n\n          {/* Modal to show friend's calendar */}\n          {/* Modal to input call duration and show the optimal times */}\n          <Modal isOpen={isModalOpen && !showOptimalTimeModal} onClose={handleCloseModal}>\n          \n            <Calendar\n              localizer={localizer}\n              events={friendEvents.length > 0 ? friendEvents.map(event => ({\n                title: event.title,\n                start: new Date(event.start),\n                end: new Date(event.end),\n              })) : []}\n              startAccessor=\"start\"\n              endAccessor=\"end\"\n              style={{ height: 400, margin: \"50px\" }}\n            />\n            {friendEvents.length === 0 && <p>This friend has no scheduled events.</p>}\n          </Modal>\n\n          {/* Modal to input call duration and show the optimal times */}\n          <Modal isOpen={isModalOpen && showOptimalTimeModal} onClose={handleCloseModal}>\n            <h2>Find Optimal Call Time</h2>\n            <input\n              type=\"number\"\n              placeholder=\"Call duration (minutes)\"\n              value={callDuration}\n              onChange={(e) => setCallDuration(e.target.value)}\n            />\n            <button onClick={() => handleFindOptimalTime(selectedFriendId, callDuration)}>Find Optimal Time</button>\n\n            {optimalTimes.length > 0 && (\n              <div>\n                {optimalTimes.map((slot, index) => (\n                  <div key={index}>\n                    <p>You can call from {slot.start.toString()} to {slot.end.toString()}</p>\n                  </div>\n                ))}\n              </div>\n            )}\n          </Modal>\n\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// Modal Component\nconst Modal = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div style={modalStyles.overlay}>\n      <div style={modalStyles.modal}>\n        <button onClick={onClose} style={modalStyles.closeButton}>Close</button>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nconst modalStyles = {\n  overlay: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1000,\n  },\n  modal: {\n    backgroundColor: '#fff',\n    padding: '20px',\n    borderRadius: '8px',\n    maxWidth: '600px',\n    width: '100%',\n  },\n  closeButton: {\n    float: 'right',\n    backgroundColor: '#f44336',\n    color: 'white',\n    border: 'none',\n    padding: '5px 10px',\n    cursor: 'pointer',\n    borderRadius: '5px',\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}