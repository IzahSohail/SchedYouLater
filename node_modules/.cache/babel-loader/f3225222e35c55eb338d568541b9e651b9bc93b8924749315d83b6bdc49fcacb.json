{"ast":null,"code":"var _jsxFileName = \"/Users/izah/Desktop/schedulemate/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Simulate user database in localStorage\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getUsersFromStorage = () => JSON.parse(localStorage.getItem('users')) || [];\nconst getCurrentUserFromStorage = () => JSON.parse(localStorage.getItem('currentUser')) || null;\nfunction App() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(getCurrentUserFromStorage());\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [friendID, setFriendID] = useState('');\n  const [users, setUsers] = useState(getUsersFromStorage());\n  const [friends, setFriends] = useState(currentUser ? currentUser.friends : []);\n\n  // Save users and current user to localStorage\n  useEffect(() => {\n    localStorage.setItem('users', JSON.stringify(users));\n    localStorage.setItem('currentUser', JSON.stringify(currentUser));\n  }, [users, currentUser]);\n\n  // Register new user\n  const handleRegister = () => {\n    if (users.find(user => user.username === username)) {\n      alert('Username already exists.');\n    } else {\n      const newUser = {\n        id: Date.now(),\n        username,\n        password,\n        friends: []\n      };\n      setUsers([...users, newUser]);\n      setCurrentUser(newUser);\n    }\n  };\n\n  // Login existing user\n  const handleLogin = () => {\n    const user = users.find(user => user.username === username && user.password === password);\n    if (user) {\n      setCurrentUser(user);\n      setFriends(user.friends);\n    } else {\n      alert('Invalid credentials.');\n    }\n  };\n\n  // Add friend by user ID\n  const handleAddFriend = () => {\n    const friend = users.find(user => user.id.toString() === friendID);\n    if (friend) {\n      if (!currentUser.friends.includes(friend.id)) {\n        const updatedUser = {\n          ...currentUser,\n          friends: [...currentUser.friends, friend.id]\n        };\n        setCurrentUser(updatedUser);\n        setFriends(updatedUser.friends);\n        setUsers(users.map(u => u.id === currentUser.id ? updatedUser : u));\n      } else {\n        alert('User is already your friend.');\n      }\n    } else {\n      alert('User not found.');\n    }\n    setFriendID(''); // Reset input field\n  };\n\n  // Find optimal time with a friend (simple placeholder logic)\n  const handleFindTime = friendID => {\n    alert(`Finding optimal time with user ID: ${friendID}...`);\n    // Here you can add actual logic to find mutual availability based on schedules.\n  };\n\n  // Logout\n  const handleLogout = () => {\n    setCurrentUser(null);\n    setFriends([]);\n  };\n  if (!currentUser) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ScheduleMate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRegister,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome, \", currentUser.username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Friends List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: friends.map(friendID => {\n        const friend = users.find(user => user.id === friendID);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [friend ? friend.username : 'Unknown User', ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleFindTime(friendID),\n            children: \"Find Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)]\n        }, friendID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Add Friend by User ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Friend ID\",\n      value: friendID,\n      onChange: e => setFriendID(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddFriend,\n      children: \"Add Friend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gpFjK/VV70wgLYnrILclsFoLI+o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","getUsersFromStorage","JSON","parse","localStorage","getItem","getCurrentUserFromStorage","App","_s","currentUser","setCurrentUser","username","setUsername","password","setPassword","friendID","setFriendID","users","setUsers","friends","setFriends","setItem","stringify","handleRegister","find","user","alert","newUser","id","Date","now","handleLogin","handleAddFriend","friend","toString","includes","updatedUser","map","u","handleFindTime","handleLogout","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/izah/Desktop/schedulemate/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Simulate user database in localStorage\nconst getUsersFromStorage = () => JSON.parse(localStorage.getItem('users')) || [];\nconst getCurrentUserFromStorage = () => JSON.parse(localStorage.getItem('currentUser')) || null;\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(getCurrentUserFromStorage());\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [friendID, setFriendID] = useState('');\n  const [users, setUsers] = useState(getUsersFromStorage());\n  const [friends, setFriends] = useState(currentUser ? currentUser.friends : []);\n\n  // Save users and current user to localStorage\n  useEffect(() => {\n    localStorage.setItem('users', JSON.stringify(users));\n    localStorage.setItem('currentUser', JSON.stringify(currentUser));\n  }, [users, currentUser]);\n\n  // Register new user\n  const handleRegister = () => {\n    if (users.find(user => user.username === username)) {\n      alert('Username already exists.');\n    } else {\n      const newUser = { id: Date.now(), username, password, friends: [] };\n      setUsers([...users, newUser]);\n      setCurrentUser(newUser);\n    }\n  };\n\n  // Login existing user\n  const handleLogin = () => {\n    const user = users.find(user => user.username === username && user.password === password);\n    if (user) {\n      setCurrentUser(user);\n      setFriends(user.friends);\n    } else {\n      alert('Invalid credentials.');\n    }\n  };\n\n  // Add friend by user ID\n  const handleAddFriend = () => {\n    const friend = users.find(user => user.id.toString() === friendID);\n    if (friend) {\n      if (!currentUser.friends.includes(friend.id)) {\n        const updatedUser = {\n          ...currentUser,\n          friends: [...currentUser.friends, friend.id],\n        };\n        setCurrentUser(updatedUser);\n        setFriends(updatedUser.friends);\n        setUsers(users.map(u => (u.id === currentUser.id ? updatedUser : u)));\n      } else {\n        alert('User is already your friend.');\n      }\n    } else {\n      alert('User not found.');\n    }\n    setFriendID(''); // Reset input field\n  };\n\n  // Find optimal time with a friend (simple placeholder logic)\n  const handleFindTime = (friendID) => {\n    alert(`Finding optimal time with user ID: ${friendID}...`);\n    // Here you can add actual logic to find mutual availability based on schedules.\n  };\n\n  // Logout\n  const handleLogout = () => {\n    setCurrentUser(null);\n    setFriends([]);\n  };\n\n  if (!currentUser) {\n    return (\n      <div>\n        <h1>ScheduleMate</h1>\n        <input\n          type=\"text\"\n          placeholder=\"Username\"\n          value={username}\n          onChange={e => setUsername(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={e => setPassword(e.target.value)}\n        />\n        <button onClick={handleLogin}>Login</button>\n        <button onClick={handleRegister}>Register</button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h1>Welcome, {currentUser.username}</h1>\n      <button onClick={handleLogout}>Logout</button>\n\n      <h2>Friends List</h2>\n      <ul>\n        {friends.map(friendID => {\n          const friend = users.find(user => user.id === friendID);\n          return (\n            <li key={friendID}>\n              {friend ? friend.username : 'Unknown User'}{' '}\n              <button onClick={() => handleFindTime(friendID)}>Find Time</button>\n            </li>\n          );\n        })}\n      </ul>\n\n      <h3>Add Friend by User ID</h3>\n      <input\n        type=\"text\"\n        placeholder=\"Friend ID\"\n        value={friendID}\n        onChange={e => setFriendID(e.target.value)}\n      />\n      <button onClick={handleAddFriend}>Add Friend</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}